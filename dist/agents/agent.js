"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Agent = void 0;
/**
 * Abstract base class for all agents in the Multi-Agent Orchestrator System.
 * This class defines the common structure and behavior for all agents.
 */
class Agent {
    /**
     * Constructs a new Agent instance.
     * @param options - Configuration options for the agent.
     */
    constructor(options) {
        var _a, _b, _c;
        // Optional logger instance
        // If provided, the agent will use this logger for logging instead of the default console
        this.logger = console;
        this.name = options.name;
        this.id = this.generateKeyFromName(options.name);
        this.description = options.description;
        this.saveChat = (_a = options.saveChat) !== null && _a !== void 0 ? _a : true; // Default to true if not provided
        this.LOG_AGENT_DEBUG_TRACE = (_b = options.LOG_AGENT_DEBUG_TRACE) !== null && _b !== void 0 ? _b : false;
        this.logger = (_c = options.logger) !== null && _c !== void 0 ? _c : (this.LOG_AGENT_DEBUG_TRACE ? console : { info: () => { }, warn: () => { }, error: () => { }, debug: () => { }, log: () => { } });
    }
    /**
     * Generates a unique key from a given name string.
     *
     * The key is generated by performing the following operations:
     * 1. Removing all non-alphanumeric characters from the name.
     * 2. Replacing all whitespace characters (spaces, tabs, etc.) with a hyphen (-).
     * 3. Converting the resulting string to lowercase.
     *
     * @param name - The input name string.
     * @returns A unique key derived from the input name.
     */
    generateKeyFromName(name) {
        // Remove special characters and replace spaces with hyphens
        const key = name
            .replace(/[^a-zA-Z\s-]/g, "")
            .replace(/\s+/g, "-")
            .toLowerCase();
        return key;
    }
    /**
     * Logs debug information with class name and agent name prefix if debug tracing is enabled.
     * @param message - The message to log
     * @param data - Optional data to include with the log message
     */
    logDebug(className, message, data) {
        if (this.LOG_AGENT_DEBUG_TRACE && this.logger) {
            const prefix = `> ${className} \n> ${this.name} \n>`;
            if (data) {
                this.logger.info(`${prefix} ${message} \n>`, data);
            }
            else {
                this.logger.info(`${prefix} ${message} \n>`);
            }
        }
    }
}
exports.Agent = Agent;
//# sourceMappingURL=agent.js.map