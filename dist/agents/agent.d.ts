import { ConversationMessage } from "../types";
import { AccumulatorTransform } from "../utils/helpers";
export interface AgentProcessingResult {
    userInput: string;
    agentId: string;
    agentName: string;
    userId: string;
    sessionId: string;
    additionalParams: Record<string, any>;
}
/**
 * Represents the response from an agent, including metadata and output.
 * @property metadata - Contains all properties of AgentProcessingResult except 'response'.
 * @property output - The actual content of the agent's response, either as a transform or a string.
 * @property streaming - Indicates whether the response is being streamed or not.
 */
export type AgentResponse = {
    metadata: Omit<AgentProcessingResult, 'response'>;
    output: AccumulatorTransform | string;
    streaming: boolean;
};
export interface AgentOptions {
    name: string;
    description: string;
    modelId?: string;
    region?: string;
    saveChat?: boolean;
    logger?: any | Console;
    LOG_AGENT_DEBUG_TRACE?: boolean;
}
/**
 * Abstract base class for all agents in the Multi-Agent Orchestrator System.
 * This class defines the common structure and behavior for all agents.
 */
export declare abstract class Agent {
    /** The name of the agent. */
    name: string;
    /** The ID of the agent. */
    id: string;
    /** A description of the agent's capabilities and expertise. */
    description: string;
    /** Whether to save the chat or not. */
    saveChat: boolean;
    logger: any | Console;
    LOG_AGENT_DEBUG_TRACE?: boolean;
    /**
     * Constructs a new Agent instance.
     * @param options - Configuration options for the agent.
     */
    constructor(options: AgentOptions);
    abstract getSystemPrompt(): string;
    /**
     * Generates a unique key from a given name string.
     *
     * The key is generated by performing the following operations:
     * 1. Removing all non-alphanumeric characters from the name.
     * 2. Replacing all whitespace characters (spaces, tabs, etc.) with a hyphen (-).
     * 3. Converting the resulting string to lowercase.
     *
     * @param name - The input name string.
     * @returns A unique key derived from the input name.
     */
    private generateKeyFromName;
    /**
     * Logs debug information with class name and agent name prefix if debug tracing is enabled.
     * @param message - The message to log
     * @param data - Optional data to include with the log message
     */
    protected logDebug(className: string, message: string, data?: any): void;
    /**
     * Abstract method to process a request.
     * This method must be implemented by all concrete agent classes.
     *
     * @param inputText - The user input as a string.
     * @param chatHistory - An array of Message objects representing the conversation history.
     * @param additionalParams - Optional additional parameters as key-value pairs.
     * @returns A Promise that resolves to a Message object containing the agent's response.
     */
    abstract processRequest(inputText: string, userId: string, sessionId: string, chatHistory: ConversationMessage[], additionalParams?: Record<string, string>): Promise<ConversationMessage | AsyncIterable<any>>;
}
